#include <iostream>
#include <limits>

#define MAX_VERTEX 100 // Define a constant for maximum vertices (adjust as needed)

using namespace std;

void floydWarshall(int graph[][MAX_VERTEX], int V) {
    // Create a distance matrix (copy of the input graph)
    int distance[MAX_VERTEX][MAX_VERTEX];
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            distance[i][j] = graph[i][j];
        }
    }

    // Floyd Warshall Algorithm
    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                // Relax edges (if shorter path found)
                if (distance[i][j] > distance[i][k] + distance[k][j]) {
                    distance[i][j] = distance[i][k] + distance[k][j];
                }
            }
        }
    }

    // Print the shortest distance matrix
    cout << "Shortest distances between every pair of vertices:\n";
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; j++) {
            if (distance[i][j] == std::numeric_limits<int>::max()) {
                cout << "INF\t";
            } else {
                cout << distance[i][j] << "\t";
            }
        }
        cout << endl;
    }
}

int main() {
    int V, E;

    cout << "Enter the number of vertices: ";
    cin >> V;

    cout << "Enter the number of edges: ";
    cin >> E;

    int graph[MAX_VERTEX][MAX_VERTEX];

    // Initialize the graph with INF (except diagonal)
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            graph[i][j] = std::numeric_limits<int>::max();
        }
        graph[i][i] = 0; // Distance to itself is 0
    }

    // Read edge connections and weights
    for (int i = 0; i < E; i++) {
        int u, v, weight;
        cout << "Enter source, destination, and weight for edge " << i + 1 << ": ";
        cin >> u >> v >> weight;
        graph[u][v] = weight; // Since this is an undirected graph, no need for v to u
    }

    floydWarshall(graph, V);

    return 0;
}
