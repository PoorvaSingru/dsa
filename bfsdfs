#include<iostream>
#include<stack>
#include<queue>
using namespace std;
struct node {
	int vertex;
	node *next;
}*adj_list[10];
class graph {
private :
	int n;
public:
	stack<int> s;
	queue<int> q;
	void readgraph(struct node *adj_list[10],int n);
	void create();
	void dfs();
	void bfs();
	
};
void graph::readgraph(struct node *adj_list[10],int n){

	int i,j;
	char reply;
	struct node*p,*c;
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			if (i==j) 
			continue;
			cout<<"\n Vertices "<<i<<" & "<<j<<"Are Adjacent ? (Y/N) :";
			cin>>reply;
			if (reply=='y' || reply=='Y'){
				c=new node;
				c->vertex =j;
				c->next=NULL;
				if (adj_list[i]==NULL){
					adj_list[i]==c;
					}
				else{
					p=adj_list[i];
					while(p->next!=NULL){
						p=p->next;
						p->next=c;
				}
				
				}
			}
		}
		
	}
}
void graph::create(){	
	struct node *p;
	int deg,i;
	cout<<"\n How many vertices ? : ";
	cin>>n;
	for (i=1;i<=n;i++){
		deg=0;
		p=adj_list[i];
		while(p!=NULL){
			deg++;
			p=p->next;
		}
		cout<<"\n \n "<<i<<"\t \t "<<deg<<"\n\n";
	}
}
void graph::dfs(){
	int sv,num;
	node *t;
	cout<<"Enter the startig vertex :";
	cin>>sv;
	int visited[10]={0};
	s.push(sv);
	while(!s.empty()){
		num=s.top();
		s.pop();
		if (visited[num]==0){
			cout<<num<<" ";
			visited[num]=1;
			
		}
		t=adj_list[num];
		while (t!=NULL){
			if(visited[t->vertex]==0){
				s.push(t->vertex);
			t=t->next;
			}
		}
		cout<<endl;
	}
		
}

void graph::bfs(){
	int sv,num;
	node *t;
	cout<<"Enter the startig vertex :";
	cin>>sv;
	int visited[10]={0};
	s.push(sv);
	while(!s.empty()){
		num=q.front();
		q.pop();
		if (visited[num]==0){
			cout<<num<<" ";
			visited[num]=1;
			
		}
		t=adj_list[num];
		while (t!=NULL){
			if(visited[t->vertex]==0){
				q.push(t->vertex);
			t=t->next;
			}
		}
		cout<<endl;
	}
		
}

int main(){
graph obj;
obj.create();
cout<<"Dfs Traversal :";
obj.dfs();
cout<<"BFS traversal :";
obj.bfs();
return 0;




or


#include<iostream>
#include<stack>
#include<queue>
using namespace std;

class graph_list
{
	private:
	int n;
	struct node
	{
		int data;
		node *next;
	}*head[10];
	
	public:
	stack<int> s;
	queue<int> q;
	graph_list()
	{
		cout<<"Enter n ";
		cin>>n;
		
		for(int i=0; i<n; i++)
			head[i]=NULL;
	}
	void create();
	void dfs();
	void bfs();
};

void graph_list::create()
{
	node *curr, *temp;
	int m;
	
	for(int i=0; i<n; i++)
	{
		head[i]=new node;
		head[i]->next=NULL;
		
		cout<<"Enter vertex data ";
		cin>>head[i]->data;
		curr=head[i];
		
		cout<<"How many adj nodes do you want to enter? ";
		cin>>m;
		
		for(int j=1; j<=m; j++)
		{
			temp= new node;
			temp->next=NULL;
			cout<<"Enter edge data ";
			cin>>temp->data;
			curr->next=temp;
			curr=curr->next;
		}
	}
}

void graph_list::dfs()
{ 
	int sv, visited[10], num;
	node *t;
	cout<<"Enter starting value";
	cin>>sv;
	
	for(int i=0; i<n; i++)
		visited[i]=0;
		
	s.push(sv);
	
	while(!s.empty())
	{
		num=s.top();
		s.pop();
		if(visited[num]==0)
		{
			cout<<num;
			visited[num]=1;
		}
		
		t=head[num];
		
		while(t!=NULL)
		{
			if(visited[t->data]==0)
				s.push(t->data);
				
			t=t->next;
		}
	}
}	

void graph_list::bfs()
{ 
	int sv, visited[10], num;
	node *t;
	cout<<"Enter starting value";
	cin>>sv;
	
	for(int i=0; i<n; i++)
		visited[i]=0;
		
	q.push(sv);
	
	while(!q.empty())
	{
		num=q.front();
		q.pop();
		if(visited[num]==0)
		{
			cout<<num;
			visited[num]=1;
		}
		
		t=head[num];
		
		while(t!=NULL)
		{
			if(visited[t->data]==0)
				q.push(t->data);
				
			t=t->next;
		}
	}
}	

int main()
{
	graph_list obj;
	obj.create();
	obj.dfs();
	obj.bfs();
}



}
