def get_client_info():
    """Asks the user for client's name and phone number, and returns a Client object."""
    name = input("What's the client's name? ")
    phone_number = input("What's their phone number? ")
    return Client(name, phone_number)

def find_phone_number(phone_book, name):
    """Looks up a client's phone number in the phone book (hash table)."""
    # Hash the name to find its approximate location in the phone book
    hashed_name = hash(name) % len(phone_book)
    # Start searching at the hashed location
    position = hashed_name
    # Look for the client's name or an empty slot using linear probing
    while phone_book[position] is not None and phone_book[position][0] != name:
        # Move to the next slot (wrap around if needed)
        position = (position + 1) % len(phone_book)
        # Check if the entire phone book has been searched (full)
        if position == hashed_name:
            return None  # Client not found (phone book full)
    # Check if the client was found
    if phone_book[position] is None:
        return None  # Client not found
    else:
        return phone_book[position][1]  # Return phone number

class Client:
    def __init__(self, name, phone_number):
        self.name = name
        self.phone_number = phone_number

# Create a phone book (hash table) with 10 slots (initially empty)
phone_book = [None] * 10

while True:
    print("\nPhone Book Menu")
    print("(A)dd a new client")
    print("(S)earch for a client")
    print("(Q)uit")
    choice = input("Enter your choice (A/S/Q): ").lower()

    if choice == 'q':
        break
    elif choice == 'a':
        client = get_client_info()
        # Hash the name to find its approximate location
        hashed_name = hash(client.name) % len(phone_book)
        # Start searching at the hashed location (linear probing for insertion)
        position = hashed_name
        while phone_book[position] is not None:
            position = (position + 1) % len(phone_book)
        # If an empty slot is found, insert the client
        if phone_book[position] is None:
            phone_book[position] = (client.name, client.phone_number)
            print(f"Client {client.name} added successfully!")
        else:
            print(f"Phone book is full! Client {client.name} could not be added.")
    elif choice == 's':
        name = input("Enter the client's name to search: ")
        phone_number = find_phone_number(phone_book, name)










or 
n=10
ht=[None]*n

#Linear Probing 
def hashfun(value):
    return value%n
def linearprobing(key,value):
    index=hashfun(value)
    i=1
    if ht[index]==None:
        ht[index]=(key,value)
    else:
        while (ht[index]!=None):
            index=(index+i)%n
            i=i+1
        ht[index]=(key,value)
def searchl(key,value):
    index=hashfun(value)
    while ht[index] is not None:
        if(ht[index]==(key,value)):
            return index
        index=(index+1)%n
    return None;
def delete(key,value):
    index=searchl(key,value)
    if index is not None:
        ht[index]=None
        print("Deleted Succesfully !")
def display():
    print(ht)
    
#Quadratic Probing
def hashfun(value):
    return value%n
def Quadraticprobing(key,value):
    index=hashfun(value)
    i=1
    if ht[index]==None:
        ht[index]=(key,value)
    else:
        while (ht[index]!=None):
            index=(index+i**2)%n
            i=i+1
        ht[index]=(key,value)
def searchq(key,value):
    i=1
    index=hashfun(value)
    while ht[index] is not None:
        if(ht[index]==(key,value)):
            return index
        index=(index+i**2)%n
        i+=1
    return None;
def deleteq(key,value):
    index=searchq(key,value)
    if index is not None:
        ht[index]=None
        print("Deleted Succesfully !")
def display():
    print(ht)
    
 #Switch Case   
flag1=True
while flag1==True:
    print("1.Linear Probing ")
    print("2.Quadratic Probing ")
    print("3.Exit")
    ch1=int(input("Enter your Choice :"))
    if ch1==1:
        flag=True
        while flag==True:
            print("\n1. Insert")
            print("2. Delete")
            print("3. Search")
            print("4. Display")
            print("5. Exit")
            ch=int(input("Enter your Chooice : "))
            if ch==1:
                name=str(input("Enter the name :"))
                no=int(input("Enter the Phone No :"))
                linearprobing(name,no)
            elif ch==2:
                name=str(input("Enter the name :"))
                no=int(input("Enter the Phone No :"))
                delete(name,no)
            elif ch==3:
                name=str(input("Enter the name :"))
                no=int(input("Enter the Phone No :"))
                print("Found At Index " , searchl(name,no))
            elif ch==4:
                display()
            elif ch==5:
                flag=False
            else:
                print("Invalid Choice")
                
    elif ch1==2:
        flag=True
        while flag==True:
            print("\n1. Insert")
            print("2. Delete")
            print("3. Search")
            print("4. Display")
            print("5. Exit")
            ch=int(input("Enter your Chooice : "))
            if ch==1:
                name=str(input("Enter the name :"))
                no=int(input("Enter the Phone No :"))
                Quadraticprobing(name,no)
            elif ch==2:
                name=str(input("Enter the name :"))
                no=int(input("Enter the Phone No :"))
                deleteq(name,no)
            elif ch==3:
                name=str(input("Enter the name :"))
                no=int(input("Enter the Phone No :"))
                print("Found At Index " , searchq(name,no))
            elif ch==4:
                display()
            elif ch==5:
                flag=False
            else:
                print("Invalid Choice")
    else:
        flag1=False
            
    
    
        
            
        
